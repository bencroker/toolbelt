// Code generated by qtc from "services_client_go.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line services_client_go.qtpl:2
package natsrpc

//line services_client_go.qtpl:2
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line services_client_go.qtpl:2
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line services_client_go.qtpl:2
func streamgoClientTemplate(qw422016 *qt422016.Writer, pkg *packageTmplData) {
//line services_client_go.qtpl:2
	qw422016.N().S(`
// Code generated by protoc-gen-go-natsrpc. DO NOT EDIT.

package `)
//line services_client_go.qtpl:5
	qw422016.E().S(pkg.PackageName.Snake)
//line services_client_go.qtpl:5
	qw422016.N().S(`

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/nats-io/nats.go"
	"google.golang.org/protobuf/proto"
)

`)
//line services_client_go.qtpl:17
	for _, svc := range pkg.Services {
//line services_client_go.qtpl:17
		qw422016.N().S(`
    `)
//line services_client_go.qtpl:18
		clientName := svc.Name.Pascal + "NATSClient"

//line services_client_go.qtpl:18
		qw422016.N().S(`

    type `)
//line services_client_go.qtpl:20
		qw422016.E().S(clientName)
//line services_client_go.qtpl:20
		qw422016.N().S(` struct {
        nc *nats.Conn
		baseSubject string
    }

    func New`)
//line services_client_go.qtpl:25
		qw422016.E().S(clientName)
//line services_client_go.qtpl:25
		qw422016.N().S(`(nc *nats.Conn, instanceID int64) (*`)
//line services_client_go.qtpl:25
		qw422016.E().S(clientName)
//line services_client_go.qtpl:25
		qw422016.N().S(`, error) {
		subjectSuffix := ""
		if instanceID > 0 {
			subjectSuffix = fmt.Sprintf(".%d", instanceID)
		}

        client := &`)
//line services_client_go.qtpl:31
		qw422016.E().S(clientName)
//line services_client_go.qtpl:31
		qw422016.N().S(`{
			baseSubject: "`)
//line services_client_go.qtpl:32
		qw422016.E().S(svc.Subject)
//line services_client_go.qtpl:32
		qw422016.N().S(`" + subjectSuffix,
            nc: nc,
        }
        return client, nil
    }

	func New`)
//line services_client_go.qtpl:38
		qw422016.E().S(clientName)
//line services_client_go.qtpl:38
		qw422016.N().S(`Singleton(nc *nats.Conn) (*`)
//line services_client_go.qtpl:38
		qw422016.E().S(clientName)
//line services_client_go.qtpl:38
		qw422016.N().S(`, error) {
		return New`)
//line services_client_go.qtpl:39
		qw422016.E().S(clientName)
//line services_client_go.qtpl:39
		qw422016.N().S(`(nc, 0)
	}

    func(client *`)
//line services_client_go.qtpl:42
		qw422016.E().S(clientName)
//line services_client_go.qtpl:42
		qw422016.N().S(`) Close() error {
        return client.nc.Drain()
    }

    `)
//line services_client_go.qtpl:46
		for _, method := range svc.Methods {
//line services_client_go.qtpl:46
			qw422016.N().S(`
        `)
//line services_client_go.qtpl:47
			cs, ss := method.IsClientStreaming, method.IsServerStreaming

//line services_client_go.qtpl:47
			qw422016.N().S(`
        `)
//line services_client_go.qtpl:48
			switch {
//line services_client_go.qtpl:49
			case !cs && !ss:
//line services_client_go.qtpl:49
				qw422016.N().S(`                `)
//line services_client_go.qtpl:50
				streamgoClientUnaryHandler(qw422016, method)
//line services_client_go.qtpl:50
				qw422016.N().S(`            `)
//line services_client_go.qtpl:51
			case cs && !ss:
//line services_client_go.qtpl:51
				qw422016.N().S(`                `)
//line services_client_go.qtpl:52
				streamgoClientClientStreamHandler(qw422016, method)
//line services_client_go.qtpl:52
				qw422016.N().S(`            `)
//line services_client_go.qtpl:53
			case !cs && ss:
//line services_client_go.qtpl:53
				qw422016.N().S(`                `)
//line services_client_go.qtpl:54
				streamgoClientServerStreamHandler(qw422016, method)
//line services_client_go.qtpl:54
				qw422016.N().S(`            `)
//line services_client_go.qtpl:55
			case cs && ss:
//line services_client_go.qtpl:55
				qw422016.N().S(`                `)
//line services_client_go.qtpl:56
				streamgoClientBidiStreamHandler(qw422016, method)
//line services_client_go.qtpl:56
				qw422016.N().S(`        `)
//line services_client_go.qtpl:57
			}
//line services_client_go.qtpl:57
			qw422016.N().S(`
    `)
//line services_client_go.qtpl:58
		}
//line services_client_go.qtpl:58
		qw422016.N().S(`

`)
//line services_client_go.qtpl:60
	}
//line services_client_go.qtpl:60
	qw422016.N().S(`
`)
//line services_client_go.qtpl:61
}

//line services_client_go.qtpl:61
func writegoClientTemplate(qq422016 qtio422016.Writer, pkg *packageTmplData) {
//line services_client_go.qtpl:61
	qw422016 := qt422016.AcquireWriter(qq422016)
//line services_client_go.qtpl:61
	streamgoClientTemplate(qw422016, pkg)
//line services_client_go.qtpl:61
	qt422016.ReleaseWriter(qw422016)
//line services_client_go.qtpl:61
}

//line services_client_go.qtpl:61
func goClientTemplate(pkg *packageTmplData) string {
//line services_client_go.qtpl:61
	qb422016 := qt422016.AcquireByteBuffer()
//line services_client_go.qtpl:61
	writegoClientTemplate(qb422016, pkg)
//line services_client_go.qtpl:61
	qs422016 := string(qb422016.B)
//line services_client_go.qtpl:61
	qt422016.ReleaseByteBuffer(qb422016)
//line services_client_go.qtpl:61
	return qs422016
//line services_client_go.qtpl:61
}

//line services_client_go.qtpl:63
func streamgoClientUnaryHandler(qw422016 *qt422016.Writer, method *methodTmplData) {
//line services_client_go.qtpl:63
	qw422016.N().S(`
`)
//line services_client_go.qtpl:65
	mn := method.Name.Pascal
	mnk := method.Name.Kebab
	in := method.InputType.Original
	out := method.OutputType.Original

//line services_client_go.qtpl:69
	qw422016.N().S(`
// Unary call for `)
//line services_client_go.qtpl:70
	qw422016.E().S(mn)
//line services_client_go.qtpl:70
	qw422016.N().S(`
func (c *`)
//line services_client_go.qtpl:71
	qw422016.E().S(method.ServiceName.Pascal)
//line services_client_go.qtpl:71
	qw422016.N().S(`NATSClient) `)
//line services_client_go.qtpl:71
	qw422016.E().S(mn)
//line services_client_go.qtpl:71
	qw422016.N().S(`(ctx context.Context, req *`)
//line services_client_go.qtpl:71
	qw422016.E().S(in)
//line services_client_go.qtpl:71
	qw422016.N().S(`, opts ...NatsRpcOption) (*`)
//line services_client_go.qtpl:71
	qw422016.E().S(out)
//line services_client_go.qtpl:71
	qw422016.N().S(`, error){
	reqBytes, err := proto.Marshal(req)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal request: %w", err)
	}

	opt := NewNatsRpcOptions(opts...)

	msg, err := c.nc.Request(c.baseSubject + ".`)
//line services_client_go.qtpl:79
	qw422016.E().S(mnk)
//line services_client_go.qtpl:79
	qw422016.N().S(`", reqBytes, opt.Timeout)
	if err != nil {
		return nil, fmt.Errorf("failed to send request: %w", err)
	}

	errHeader, ok := msg.Header[NatsRpcErrorHeader]
	if ok {
		return nil, fmt.Errorf("server error: %s", errHeader)
	}

	res := &`)
//line services_client_go.qtpl:89
	qw422016.E().S(out)
//line services_client_go.qtpl:89
	qw422016.N().S(`{}
	if err := proto.Unmarshal(msg.Data, res); err != nil {
		return nil, fmt.Errorf("failed to unmarshal response: %w", err)
	}

	return res, nil
}
`)
//line services_client_go.qtpl:96
}

//line services_client_go.qtpl:96
func writegoClientUnaryHandler(qq422016 qtio422016.Writer, method *methodTmplData) {
//line services_client_go.qtpl:96
	qw422016 := qt422016.AcquireWriter(qq422016)
//line services_client_go.qtpl:96
	streamgoClientUnaryHandler(qw422016, method)
//line services_client_go.qtpl:96
	qt422016.ReleaseWriter(qw422016)
//line services_client_go.qtpl:96
}

//line services_client_go.qtpl:96
func goClientUnaryHandler(method *methodTmplData) string {
//line services_client_go.qtpl:96
	qb422016 := qt422016.AcquireByteBuffer()
//line services_client_go.qtpl:96
	writegoClientUnaryHandler(qb422016, method)
//line services_client_go.qtpl:96
	qs422016 := string(qb422016.B)
//line services_client_go.qtpl:96
	qt422016.ReleaseByteBuffer(qb422016)
//line services_client_go.qtpl:96
	return qs422016
//line services_client_go.qtpl:96
}

//line services_client_go.qtpl:98
func streamgoClientClientStreamHandler(qw422016 *qt422016.Writer, method *methodTmplData) {
//line services_client_go.qtpl:98
	qw422016.N().S(`
`)
//line services_client_go.qtpl:100
	mn := method.Name.Pascal
	mnk := method.Name.Kebab
	in := method.InputType.Original
	out := method.OutputType.Original

//line services_client_go.qtpl:104
	qw422016.N().S(`
// Client streaming call for `)
//line services_client_go.qtpl:105
	qw422016.E().S(mn)
//line services_client_go.qtpl:105
	qw422016.N().S(`
func( c *`)
//line services_client_go.qtpl:106
	qw422016.E().S(method.ServiceName.Pascal)
//line services_client_go.qtpl:106
	qw422016.N().S(`NATSClient) `)
//line services_client_go.qtpl:106
	qw422016.E().S(mn)
//line services_client_go.qtpl:106
	qw422016.N().S(`(ctx context.Context, reqGen func(reqCh chan<- *`)
//line services_client_go.qtpl:106
	qw422016.E().S(in)
//line services_client_go.qtpl:106
	qw422016.N().S(`) error, opts ...NatsRpcOption) (res *`)
//line services_client_go.qtpl:106
	qw422016.E().S(out)
//line services_client_go.qtpl:106
	qw422016.N().S(`, err error) {
	mailbox := nats.NewInbox()

	var (
		sub   *nats.Subscription
		resCh = make(chan *`)
//line services_client_go.qtpl:111
	qw422016.E().S(out)
//line services_client_go.qtpl:111
	qw422016.N().S(`)
		opt   = NewNatsRpcOptions(opts...)
	)
	sub, err = c.nc.Subscribe(mailbox, func(msg *nats.Msg) {
		log.Print("Got response from server")
		defer sub.Unsubscribe()
		defer close(resCh)

		t := time.NewTimer(opt.Timeout)

		select {
		case <-ctx.Done():
			err = ctx.Err()
			return
		case <-t.C:
			err = fmt.Errorf("timeout")
			return
		default:
			res = &`)
//line services_client_go.qtpl:129
	qw422016.E().S(out)
//line services_client_go.qtpl:129
	qw422016.N().S(`{}
			if err = proto.Unmarshal(msg.Data, res); err != nil {
				res = nil
				err = fmt.Errorf("failed to unmarshal response: %w", err)
				return
			}
			resCh <- res
		}
	})
	if err != nil {
		return nil, fmt.Errorf("failed to subscribe to response: %w", err)
	}

	doneReqGen := make(chan struct{})
	reqCh := make(chan *`)
//line services_client_go.qtpl:143
	qw422016.E().S(in)
//line services_client_go.qtpl:143
	qw422016.N().S(`)
	go func() {
		defer func(){
			eofMsg := &nats.Msg{
				Subject: c.baseSubject + ".`)
//line services_client_go.qtpl:147
	qw422016.E().S(mnk)
//line services_client_go.qtpl:147
	qw422016.N().S(`",
				Reply:   mailbox,
				Data: nil,
			}
			c.nc.PublishMsg(eofMsg)
		}()

		if err = reqGen(reqCh); err != nil {
			err = fmt.Errorf("failed to generate requests: %w", err)
			return
		}

		<-doneReqGen
	}()

	for req := range reqCh {
		log.Printf("Sending request to server: %v", req)
		reqBytes, err := proto.Marshal(req)
		if err != nil {
			return nil, fmt.Errorf("failed to marshal request: %w", err)
		}
		msg := &nats.Msg{
			Subject: c.baseSubject + ".`)
//line services_client_go.qtpl:169
	qw422016.E().S(mnk)
//line services_client_go.qtpl:169
	qw422016.N().S(`",
			Reply:   mailbox,
			Data:    reqBytes,
		}
		if err = c.nc.PublishMsg(msg); err != nil {
			return nil, fmt.Errorf("failed to send request: %w", err)
		}
	}
	doneReqGen <- struct{}{}

	res = <-resCh
	return
}
`)
//line services_client_go.qtpl:182
}

//line services_client_go.qtpl:182
func writegoClientClientStreamHandler(qq422016 qtio422016.Writer, method *methodTmplData) {
//line services_client_go.qtpl:182
	qw422016 := qt422016.AcquireWriter(qq422016)
//line services_client_go.qtpl:182
	streamgoClientClientStreamHandler(qw422016, method)
//line services_client_go.qtpl:182
	qt422016.ReleaseWriter(qw422016)
//line services_client_go.qtpl:182
}

//line services_client_go.qtpl:182
func goClientClientStreamHandler(method *methodTmplData) string {
//line services_client_go.qtpl:182
	qb422016 := qt422016.AcquireByteBuffer()
//line services_client_go.qtpl:182
	writegoClientClientStreamHandler(qb422016, method)
//line services_client_go.qtpl:182
	qs422016 := string(qb422016.B)
//line services_client_go.qtpl:182
	qt422016.ReleaseByteBuffer(qb422016)
//line services_client_go.qtpl:182
	return qs422016
//line services_client_go.qtpl:182
}

//line services_client_go.qtpl:184
func streamgoClientServerStreamHandler(qw422016 *qt422016.Writer, method *methodTmplData) {
//line services_client_go.qtpl:184
	qw422016.N().S(`
`)
//line services_client_go.qtpl:186
	mn := method.Name.Pascal
	mnk := method.Name.Kebab
	in := method.InputType.Original
	out := method.OutputType.Original

//line services_client_go.qtpl:190
	qw422016.N().S(`
// Server streaming call for `)
//line services_client_go.qtpl:191
	qw422016.E().S(mn)
//line services_client_go.qtpl:191
	qw422016.N().S(`
func( c *`)
//line services_client_go.qtpl:192
	qw422016.E().S(method.ServiceName.Pascal)
//line services_client_go.qtpl:192
	qw422016.N().S(`NATSClient) `)
//line services_client_go.qtpl:192
	qw422016.E().S(mn)
//line services_client_go.qtpl:192
	qw422016.N().S(`(ctx context.Context, req *`)
//line services_client_go.qtpl:192
	qw422016.E().S(in)
//line services_client_go.qtpl:192
	qw422016.N().S(`, onRes func(res *`)
//line services_client_go.qtpl:192
	qw422016.E().S(out)
//line services_client_go.qtpl:192
	qw422016.N().S(`) error, opt ...NatsRpcOption) ( error) {
	reqBytes, err := proto.Marshal(req)
	if err != nil {
		return fmt.Errorf("failed to marshal request: %w", err)
	}

	mailbox := nats.NewInbox()

	ch := make(chan *nats.Msg)
	defer close(ch)

	sub, err := c.nc.ChanSubscribe(mailbox, ch)
	if err != nil {
		return fmt.Errorf("failed to subscribe to response: %w", err)
	}
	defer sub.Unsubscribe()

	go func() error{
		msg := &nats.Msg{
			Subject: c.baseSubject + ".`)
//line services_client_go.qtpl:211
	qw422016.E().S(mnk)
//line services_client_go.qtpl:211
	qw422016.N().S(`",
			Reply:   mailbox,
			Data:    reqBytes,
		}
		if err = c.nc.PublishMsg(msg); err != nil {
			return fmt.Errorf("failed to send request: %w", err)
		}
		return nil
	}()

	for {
		select {
		case <-ctx.Done():
			return ctx.Err()
		case msg := <-ch:
			if len(msg.Data) == 0 {
				return nil
			}

			res := &`)
//line services_client_go.qtpl:230
	qw422016.E().S(out)
//line services_client_go.qtpl:230
	qw422016.N().S(`{}
			if err := proto.Unmarshal(msg.Data, res); err != nil {
				return fmt.Errorf("failed to unmarshal response: %w", err)
			}
			if err := onRes(res); err != nil {
				return fmt.Errorf("failed to handle response: %w", err)
			}
		}
	}
}
`)
//line services_client_go.qtpl:240
}

//line services_client_go.qtpl:240
func writegoClientServerStreamHandler(qq422016 qtio422016.Writer, method *methodTmplData) {
//line services_client_go.qtpl:240
	qw422016 := qt422016.AcquireWriter(qq422016)
//line services_client_go.qtpl:240
	streamgoClientServerStreamHandler(qw422016, method)
//line services_client_go.qtpl:240
	qt422016.ReleaseWriter(qw422016)
//line services_client_go.qtpl:240
}

//line services_client_go.qtpl:240
func goClientServerStreamHandler(method *methodTmplData) string {
//line services_client_go.qtpl:240
	qb422016 := qt422016.AcquireByteBuffer()
//line services_client_go.qtpl:240
	writegoClientServerStreamHandler(qb422016, method)
//line services_client_go.qtpl:240
	qs422016 := string(qb422016.B)
//line services_client_go.qtpl:240
	qt422016.ReleaseByteBuffer(qb422016)
//line services_client_go.qtpl:240
	return qs422016
//line services_client_go.qtpl:240
}

//line services_client_go.qtpl:242
func streamgoClientBidiStreamHandler(qw422016 *qt422016.Writer, method *methodTmplData) {
//line services_client_go.qtpl:242
	qw422016.N().S(`
`)
//line services_client_go.qtpl:244
	mn := method.Name.Pascal
	mnk := method.Name.Kebab
	in := method.InputType.Original
	out := method.OutputType.Original

//line services_client_go.qtpl:248
	qw422016.N().S(`
type Bidirectional`)
//line services_client_go.qtpl:249
	qw422016.E().S(mn)
//line services_client_go.qtpl:249
	qw422016.N().S(`Func func(ctx context.Context, reqCh chan<- *`)
//line services_client_go.qtpl:249
	qw422016.E().S(in)
//line services_client_go.qtpl:249
	qw422016.N().S(`, resCh <-chan *`)
//line services_client_go.qtpl:249
	qw422016.E().S(out)
//line services_client_go.qtpl:249
	qw422016.N().S(`) error
// Bidi streaming call for `)
//line services_client_go.qtpl:250
	qw422016.E().S(mn)
//line services_client_go.qtpl:250
	qw422016.N().S(`
func(c *`)
//line services_client_go.qtpl:251
	qw422016.E().S(method.ServiceName.Pascal)
//line services_client_go.qtpl:251
	qw422016.N().S(`NATSClient) `)
//line services_client_go.qtpl:251
	qw422016.E().S(mn)
//line services_client_go.qtpl:251
	qw422016.N().S(`(biDirectionalFunc Bidirectional`)
//line services_client_go.qtpl:251
	qw422016.E().S(mn)
//line services_client_go.qtpl:251
	qw422016.N().S(`Func) error {
	var (
		mailbox      = nats.NewInbox()
		serverResSub *nats.Subscription
		errCh        = make(chan error)
		reqCh        = make(chan *`)
//line services_client_go.qtpl:256
	qw422016.E().S(in)
//line services_client_go.qtpl:256
	qw422016.N().S(`)
		resCh        = make(chan *`)
//line services_client_go.qtpl:257
	qw422016.E().S(out)
//line services_client_go.qtpl:257
	qw422016.N().S(`)
		doneCh       = make(chan struct{})
	)
	defer close(resCh)
	defer close(doneCh)
	defer close(errCh)

	// Handle server responses
	serverResSub, err := c.nc.Subscribe(mailbox, func(msg *nats.Msg) {
		log.Print("Got response from server")

		if len(msg.Data) == 0 {
			doneCh <- struct{}{}
			return
		}

		res := &`)
//line services_client_go.qtpl:273
	qw422016.E().S(out)
//line services_client_go.qtpl:273
	qw422016.N().S(`{}
		if err := proto.Unmarshal(msg.Data, res); err != nil {
			errCh <- fmt.Errorf("failed to unmarshal response: %w", err)
			return
		}
		resCh <- res
	})
	if err != nil {
		return fmt.Errorf("failed to subscribe to response: %w", err)
	}
	defer serverResSub.Unsubscribe()

	ctx := context.Background()

	// Start user defined bidirectional handler
	go func() {
		if err := biDirectionalFunc(ctx, reqCh, resCh); err != nil {
			errCh <- fmt.Errorf("failed to handle bidi stream: %w", err)
		}
	}()

	// Take requests from user defined handler and send them to server
	go func() {
		for req := range reqCh {
			log.Printf("Sending request to server: %v", req)
			reqBytes, err := proto.Marshal(req)
			if err != nil {
				errCh <- fmt.Errorf("failed to marshal request: %w", err)
				return
			}
			msg := &nats.Msg{
				Subject: c.baseSubject + ".`)
//line services_client_go.qtpl:304
	qw422016.E().S(mnk)
//line services_client_go.qtpl:304
	qw422016.N().S(`",
				Reply:   mailbox,
				Data:    reqBytes,
			}
			if err = c.nc.PublishMsg(msg); err != nil {
				errCh <- fmt.Errorf("failed to send request: %w", err)
				return
			}
		}
		doneCh <- struct{}{}
	}()

	// Wait for context cancellation, error from user defined handler or EOF from server
	for {
		select {
		case <-ctx.Done():
			return ctx.Err()
		case err := <-errCh:
			if err != nil {
				return fmt.Errorf("failed to handle bidi stream: %w", err)
			}
			return nil
		case <-doneCh:
			return nil
		}
	}
}

`)
//line services_client_go.qtpl:332
}

//line services_client_go.qtpl:332
func writegoClientBidiStreamHandler(qq422016 qtio422016.Writer, method *methodTmplData) {
//line services_client_go.qtpl:332
	qw422016 := qt422016.AcquireWriter(qq422016)
//line services_client_go.qtpl:332
	streamgoClientBidiStreamHandler(qw422016, method)
//line services_client_go.qtpl:332
	qt422016.ReleaseWriter(qw422016)
//line services_client_go.qtpl:332
}

//line services_client_go.qtpl:332
func goClientBidiStreamHandler(method *methodTmplData) string {
//line services_client_go.qtpl:332
	qb422016 := qt422016.AcquireByteBuffer()
//line services_client_go.qtpl:332
	writegoClientBidiStreamHandler(qb422016, method)
//line services_client_go.qtpl:332
	qs422016 := string(qb422016.B)
//line services_client_go.qtpl:332
	qt422016.ReleaseByteBuffer(qb422016)
//line services_client_go.qtpl:332
	return qs422016
//line services_client_go.qtpl:332
}
