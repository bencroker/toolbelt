// Code generated by qtc from "services_kv_go.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line services_kv_go.qtpl:2
package natsrpc

//line services_kv_go.qtpl:2
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line services_kv_go.qtpl:2
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line services_kv_go.qtpl:2
func streamgoKVTemplate(qw422016 *qt422016.Writer, pkg *packageTmplData) {
//line services_kv_go.qtpl:2
	qw422016.N().S(`
// Code generated by protoc-gen-go-nrpc. DO NOT EDIT.

package `)
//line services_kv_go.qtpl:5
	qw422016.E().S(pkg.PackageName.Snake)
//line services_kv_go.qtpl:5
	qw422016.N().S(`

import (
    "context"
	"fmt"
	"time"
    "errors"
    "github.com/nats-io/nats.go/jetstream"
    "google.golang.org/protobuf/proto"
)

`)
//line services_kv_go.qtpl:16
	for _, kv := range pkg.KeyValues {
//line services_kv_go.qtpl:16
		qw422016.N().S(`
type `)
//line services_kv_go.qtpl:17
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:17
		qw422016.N().S(`KV struct {
    kv jetstream.KeyValue
}

func(tkv *`)
//line services_kv_go.qtpl:21
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:21
		qw422016.N().S(`KV) new`)
//line services_kv_go.qtpl:21
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:21
		qw422016.N().S(`()  *`)
//line services_kv_go.qtpl:21
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:21
		qw422016.N().S(`{
    return &`)
//line services_kv_go.qtpl:22
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:22
		qw422016.N().S(`{}
}

func(tkv *`)
//line services_kv_go.qtpl:25
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:25
		qw422016.N().S(`KV) id(msg *`)
//line services_kv_go.qtpl:25
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:25
		qw422016.N().S(`) string {
`)
//line services_kv_go.qtpl:26
		if kv.IdIsString {
//line services_kv_go.qtpl:26
			qw422016.N().S(`    return msg.`)
//line services_kv_go.qtpl:27
			qw422016.E().S(kv.ID.Pascal)
//line services_kv_go.qtpl:27
			qw422016.N().S(`
`)
//line services_kv_go.qtpl:28
		} else {
//line services_kv_go.qtpl:28
			qw422016.N().S(`    return fmt.Sprint(msg.`)
//line services_kv_go.qtpl:29
			qw422016.E().S(kv.ID.Pascal)
//line services_kv_go.qtpl:29
			qw422016.N().S(`)
`)
//line services_kv_go.qtpl:30
		}
//line services_kv_go.qtpl:30
		qw422016.N().S(`}

// should generate kv bucket for `)
//line services_kv_go.qtpl:33
		qw422016.N().S(kv.Bucket)
//line services_kv_go.qtpl:33
		qw422016.N().S(` `)
//line services_kv_go.qtpl:33
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:33
		qw422016.N().S(`
func Upsert`)
//line services_kv_go.qtpl:34
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:34
		qw422016.N().S(`KV(ctx context.Context, js jetstream.JetStream) (*`)
//line services_kv_go.qtpl:34
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:34
		qw422016.N().S(`KV, error) {
    ttl, err := time.ParseDuration("`)
//line services_kv_go.qtpl:35
		qw422016.E().S(kv.TTL.String())
//line services_kv_go.qtpl:35
		qw422016.N().S(`")
	if err != nil {
		return nil, fmt.Errorf("failed to parse duration: %w", err)
	}

	kvCfg := jetstream.KeyValueConfig{
		Bucket: "`)
//line services_kv_go.qtpl:41
		qw422016.N().S(kv.Bucket)
//line services_kv_go.qtpl:41
		qw422016.N().S(`",
		TTL: ttl,
		History: 1,
	}
	kv, err := js.CreateOrUpdateKeyValue(ctx, kvCfg)
	if err != nil {
		return nil, fmt.Errorf("failed to upsert kv: %w", err)
	}

    container := &`)
//line services_kv_go.qtpl:50
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:50
		qw422016.N().S(`KV{
        kv: kv,
    }

	return container, nil
}

func (tkv *`)
//line services_kv_go.qtpl:57
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:57
		qw422016.N().S(`KV) Keys(ctx context.Context, watchOpts ...jetstream.WatchOpt) ([]string, error) {
	keys, err := tkv.kv.Keys(ctx, watchOpts...)
	if err != nil && err != jetstream.ErrNoKeysFound {
		return nil, err
	}
	return keys, nil
}

func (tkv *`)
//line services_kv_go.qtpl:65
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:65
		qw422016.N().S(`KV) Get(ctx context.Context, key string) (*`)
//line services_kv_go.qtpl:65
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:65
		qw422016.N().S(`, uint64, error) {
	entry, err := tkv.kv.Get(ctx,key)
	if err != nil {
		if err == jetstream.ErrKeyNotFound {
			return nil, 0, nil
		}
	}
	out, err := tkv.unmarshal(entry)
	if err != nil {
		return out, 0, err
	}
	return out, entry.Revision(), nil
}

func (tkv *`)
//line services_kv_go.qtpl:79
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:79
		qw422016.N().S(`KV) unmarshal(entry jetstream.KeyValueEntry) (*`)
//line services_kv_go.qtpl:79
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:79
		qw422016.N().S(`, error) {
	if entry == nil {
		return nil, nil
	}
	b := entry.Value()
	if b == nil {
		return nil, nil
	}
	t := tkv.new`)
//line services_kv_go.qtpl:87
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:87
		qw422016.N().S(`()
	if err := proto.Unmarshal(b, t); err != nil {
		return t, err
	}
	return t, nil
}

func (tkv *`)
//line services_kv_go.qtpl:94
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:94
		qw422016.N().S(`KV) Load(ctx context.Context, keys ...string) ([]*`)
//line services_kv_go.qtpl:94
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:94
		qw422016.N().S(`, error) {
	var errs []error
    loaded := make([]*`)
//line services_kv_go.qtpl:96
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:96
		qw422016.N().S(`, len(keys))
    for i, key := range keys {
        t, _, err := tkv.Get(ctx, key)
        if err != nil {
            errs = append(errs, err)
        }
        loaded[i] = t
    }
	if len(errs) > 0 {
		return nil, errors.Join(errs...)
	}
	return loaded, nil
}

func (tkv *`)
//line services_kv_go.qtpl:110
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:110
		qw422016.N().S(`KV) All(ctx context.Context) (out []*`)
//line services_kv_go.qtpl:110
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:110
		qw422016.N().S(`, err error) {
	keys, err := tkv.kv.Keys(ctx)
	if err != nil {
		return nil, err
	}
	return tkv.Load(ctx, keys...)
}

func (tkv *`)
//line services_kv_go.qtpl:118
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:118
		qw422016.N().S(`KV) Set(ctx context.Context, value *`)
//line services_kv_go.qtpl:118
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:118
		qw422016.N().S(`) (revision uint64, err error) {
	b, err := proto.Marshal(value)
	if err != nil {
		return 0, err
	}
	revision, err = tkv.kv.Put(ctx, tkv.id(value), b)
	return
}

func (tkv *`)
//line services_kv_go.qtpl:127
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:127
		qw422016.N().S(`KV) Batch(ctx context.Context, values ... *`)
//line services_kv_go.qtpl:127
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:127
		qw422016.N().S(`) (err error) {
    errs := make([]error, len(values))
    for i, value := range values {
        _, errs[i] = tkv.Set(ctx, value)
    }
    if err := errors.Join(errs...); err != nil {
        return fmt.Errorf("failed to batch set: %w", err)
    }
	return nil
}

func (tkv *`)
//line services_kv_go.qtpl:138
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:138
		qw422016.N().S(`KV) Update(ctx context.Context, value *`)
//line services_kv_go.qtpl:138
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:138
		qw422016.N().S(`, last uint64) (revision uint64, err error) {
	b, err := proto.Marshal(value)
	if err != nil {
		return 0, err
	}
	key := tkv.id(value)
	revision, err = tkv.kv.Update(ctx, key, b, last)
	return
}

func (tkv *`)
//line services_kv_go.qtpl:148
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:148
		qw422016.N().S(`KV) DeleteKey(ctx context.Context, key string) (err error) {
	return tkv.kv.Delete(ctx, key)
}

func (tkv *`)
//line services_kv_go.qtpl:152
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:152
		qw422016.N().S(`KV) Delete(ctx context.Context, value *`)
//line services_kv_go.qtpl:152
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:152
		qw422016.N().S(`) (err error) {
	return tkv.kv.Delete(ctx, tkv.id(value))
}

func (tkv *`)
//line services_kv_go.qtpl:156
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:156
		qw422016.N().S(`KV) watch(ctx context.Context, w jetstream.KeyWatcher) (values <-chan *`)
//line services_kv_go.qtpl:156
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:156
		qw422016.N().S(`, stop func() error, err error) {
	ch := make(chan *`)
//line services_kv_go.qtpl:157
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:157
		qw422016.N().S(`)
	updates := w.Updates()
	go func(ctx context.Context, w jetstream.KeyWatcher) error {
		for {
			select {
			case <-ctx.Done():
				return nil
			case entry := <-updates:
				t, err := tkv.unmarshal(entry)
				if err != nil {
					return err
				}
				ch <- t
			}
		}
	}(ctx, w)
	return ch, w.Stop, nil
}

func (tkv *`)
//line services_kv_go.qtpl:176
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:176
		qw422016.N().S(`KV) Watch(ctx context.Context, key string, opts ...jetstream.WatchOpt) (values <-chan *`)
//line services_kv_go.qtpl:176
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:176
		qw422016.N().S(`, stop func() error, err error) {
	w, err := tkv.kv.Watch(ctx,key, opts...)
	if err != nil {
		return nil, nil, fmt.Errorf("failed to watch key %s: %w", key, err)
	}
	return tkv.watch(ctx, w)
}

func (tkv *`)
//line services_kv_go.qtpl:184
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:184
		qw422016.N().S(`KV) WatchAll(ctx context.Context, opts ...jetstream.WatchOpt) (values <-chan *`)
//line services_kv_go.qtpl:184
		qw422016.E().S(kv.Name.Pascal)
//line services_kv_go.qtpl:184
		qw422016.N().S(`, stop func() error, err error) {
	w, err := tkv.kv.WatchAll(ctx,opts...)
	if err != nil {
		return nil, nil, fmt.Errorf("failed to watch all: %w", err)
	}
	return tkv.watch(ctx, w)
}

`)
//line services_kv_go.qtpl:192
	}
//line services_kv_go.qtpl:192
	qw422016.N().S(`
`)
//line services_kv_go.qtpl:193
}

//line services_kv_go.qtpl:193
func writegoKVTemplate(qq422016 qtio422016.Writer, pkg *packageTmplData) {
//line services_kv_go.qtpl:193
	qw422016 := qt422016.AcquireWriter(qq422016)
//line services_kv_go.qtpl:193
	streamgoKVTemplate(qw422016, pkg)
//line services_kv_go.qtpl:193
	qt422016.ReleaseWriter(qw422016)
//line services_kv_go.qtpl:193
}

//line services_kv_go.qtpl:193
func goKVTemplate(pkg *packageTmplData) string {
//line services_kv_go.qtpl:193
	qb422016 := qt422016.AcquireByteBuffer()
//line services_kv_go.qtpl:193
	writegoKVTemplate(qb422016, pkg)
//line services_kv_go.qtpl:193
	qs422016 := string(qb422016.B)
//line services_kv_go.qtpl:193
	qt422016.ReleaseByteBuffer(qb422016)
//line services_kv_go.qtpl:193
	return qs422016
//line services_kv_go.qtpl:193
}
