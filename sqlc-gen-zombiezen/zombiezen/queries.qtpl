{% func GenerateQuery(q *GenerateQueryContext) %}
// Code generated by "sqlc-gen-zombiezen". DO NOT EDIT.

package {%s q.PackageName.Lower %}

import (
    "fmt"
    "zombiezen.com/go/sqlite"

    {% if q.NeedsTimePackage %}
    "time"
    "github.com/delaneyj/toolbelt"
    {% endif %}
)


{% if q.HasResponse && !q.ResponseIsSingularField %}
type {%s q.Name.Pascal %}Res struct {
    {%- for _,f := range q.ResponseFields -%}
        {%s f.Name.Pascal %} {%s f.GoType.Original %} `json:"{%s f.Name.Lower %}"`
    {%- endfor -%}
}
{% endif %}

{% if q.HasParams && !q.ParamsIsSingularField %}
type {%s q.Name.Pascal %}Params struct {
    {%- for _,f := range q.Params -%}
        {%s f.Name.Pascal %} {%s f.GoType.Original %} `json:"{%s f.Name.Lower %}"`
    {%- endfor -%}
}
{% endif %}

type {%s q.Name.Pascal %}Stmt struct {
    stmt *sqlite.Stmt
}

func {%s q.Name.Pascal %}(tx *sqlite.Conn) *{%s q.Name.Pascal %}Stmt {
    // Prepare the statement into connection cache
    stmt := tx.Prep(`
{%s q.SQL %}
    `)
    ps := &{%s q.Name.Pascal %}Stmt{stmt: stmt}
    return ps
}

func (ps *{%s q.Name.Pascal %}Stmt) Run(
    {%= fillParams(q) -%}
) (
    {%= fillReturns(q) -%}
) {
    defer ps.stmt.Reset()

{%- if len(q.Params) > 0 %}
    // Bind parameters
    {%- code
        isSingle := q.ParamsIsSingularField
    -%}
    {%- for _,p := range q.Params -%}
        {%- switch p.GoType.Original -%}
            {%- case "time.Time" -%}
                ps.stmt.Bind{%s p.SQLType.Pascal %}({%d p.Column %}, toolbelt.TimeToJulianDay({%if isSingle %}{%s p.Name.Camel %}{%else %}params.{%s p.Name.Pascal %}{% endif %}))
            {%- case "time.Duration" -%}
                ps.stmt.Bind{%s p.SQLType.Pascal %}({%d p.Column %}, toolbelt.DurationToMilliseconds({%if isSingle %}{%s p.Name.Camel %}{%else %}params.{%s p.Name.Pascal %}{% endif %}))
            {%- default -%}
                ps.stmt.Bind{%s p.SQLType.Pascal %}({%d p.Column %}, {%if isSingle %}{%s p.Name.Camel %}{%else %}params.{%s p.Name.Pascal %}{% endif %})
        {%- endswitch -%}
    {%- endfor -%}
{%- endif -%}

    // Execute the query
{%- if q.HasResponse -%}
    {%- if q.ResponseHasMultiple -%}
        for {
            if hasRow, err := ps.stmt.Step(); err != nil {
                return res, fmt.Errorf("failed to execute {{.Name.Lower}} SQL: %w", err)
            } else if !hasRow {
                break
            }
            {%= fillResponse(q) %}

            res = append(res, row)
        }
    {%- else -%}
        if hasRow, err := ps.stmt.Step(); err != nil {
            {%- if q.ResponseIsSingularField -%}
            return {%s q.ResponseFields[0].Name.Camel %}, fmt.Errorf("failed to execute {{.Name.Lower}} SQL: %w", err)
            {%- else -%}
            return res, err
            {%- endif -%}
        } else if hasRow {
            {%= fillResponse(q) -%}
            {%- if !q.ResponseIsSingularField -%}
            res = &row
            {%- endif -%}
        }
    {%- endif -%}
{%- else -%}
    if _, err := ps.stmt.Step(); err != nil {
        return fmt.Errorf("failed to execute {%s q.Name.Lower %} SQL: %w", err)
    }
{%- endif -%}

{%- if q.HasResponse -%}
    {%- if q.ResponseIsSingularField -%}
    return {%s q.ResponseFields[0].Name.Camel %}, nil
    {%- else -%}
    return res, nil
    {%- endif -%}
{%- else -%}
    return nil
{%- endif -%}
}

func Once{%s q.Name.Pascal %}(
    tx *sqlite.Conn,
    {%= fillParams(q) -%}
) (
    {%= fillReturns(q) -%}
) {
    ps := {%s q.Name.Pascal %}(tx)

    return ps.Run(
    {%- if q.HasParams -%}
        {% if q.ParamsIsSingularField -%}
            {%s q.Params[0].Name.Lower -%} ,
        {%- else -%}
            params,
        {%- endif -%}
    {%- endif %}
    )
}

{% endfunc %}

{%- func fillResponse(q *GenerateQueryContext) %}
{%- if q.ResponseIsSingularField -%}
    {%s q.ResponseFields[0].Name.Camel %} = ps.stmt.Column{%s q.ResponseFields[0].SQLType.Pascal %}(0)
{%- else -%}
    row := {%s q.Name.Pascal %}Res{
    {%- for _,f := range q.ResponseFields -%}
        {%s f.Name.Pascal %}: ps.stmt.Column{%s f.SQLType.Pascal %}({%d f.Offset %}),
    {%- endfor -%}
    }
{%- endif %}
{%- endfunc %}

{%- func fillParams(q *GenerateQueryContext) -%}
{%- if q.HasParams -%}
    {%- if q.ParamsIsSingularField -%}
        {%s q.Params[0].Name.Lower %} {%s q.Params[0].GoType.Original -%},
    {%- else -%}
        params {%s q.Name.Pascal %}Params,
    {%- endif -%}
{%- endif -%}
{%- endfunc  -%}


{%- func fillReturns(q *GenerateQueryContext) -%}
{%- if q.HasResponse -%}
    {%- if q.ResponseIsSingularField -%}
        {%s q.ResponseFields[0].Name.Camel %} {%s q.ResponseFields[0].GoType.Original -%},
    {%- else -%}
        res {% if q.ResponseHasMultiple %}[]{% else %}*{% endif %}{%s q.Name.Pascal %}Res,
    {%- endif -%}
{%- endif -%}
    err error,
{%- endfunc -%}