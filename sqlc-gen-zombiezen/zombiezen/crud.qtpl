{% func GenerateCRUD(t *GenerateCRUDTable) %}
// Code generated by "sqlc-gen-zombiezen". DO NOT EDIT.

package {%s t.PackageName.Lower %}

import (
    "fmt"
    "zombiezen.com/go/sqlite"
)

type {%s t.SingleName.Pascal %}Model struct {
    {%- for _,f := range t.Fields -%}
        {%s f.Name.Pascal %} {%s f.GoType.Original %} `json:"{%s f.Name.Lower %}"`
    {%- endfor -%}
}

func Create{%s t.SingleName.Pascal %}(tx *sqlite.Conn, m *{%s t.SingleName.Pascal %}Model) error {
    stmt := tx.Prep(`
INSERT INTO {%s t.Name.Lower %} (
    {%- for _,f := range t.Fields -%}
        {%s f.Name.Lower %},
    {%- endfor -%}
) VALUES (
    {%- for  range t.Fields -%}
        ?,
    {%- endfor -%}
)
    `)
    defer stmt.Reset()

    // Bind parameters
    {%= bindFields(t) %}

    if _, err := stmt.Step(); err != nil {
        return fmt.Errorf("failed to insert {%s t.Name.Lower %}: %w", err)
    }

    return nil
}

func Read{%s t.SingleName.Pascal %}(tx *sqlite.Conn, id int64) (*{%s t.SingleName.Pascal %}Model, error) {
    stmt := tx.Prep(`
SELECT
    {%- for _,f := range t.Fields -%}
        {%s f.Name.Lower %},
    {%- endfor -%}
FROM {%s t.Name.Lower %}
WHERE id = ?
    `)
    defer stmt.Reset()

    stmt.BindInt64(1, id)

    if hasRow, err := stmt.Step(); err != nil {
        return nil, fmt.Errorf("failed to read {%s t.Name.Lower %}: %w", err)
    } else if !hasRow {
        return nil, nil
    }

    m := &{%s t.SingleName.Pascal %}Model{}
    {%- for i,f := range t.Fields -%}
        {%- switch f.GoType.Original -%}
            {%- case "time.Time" -%}
                m.{%s f.Name.Pascal %} = toolbelt.JulianDayToTime(stmt.Column{%s f.SQLType.Pascal %}({%d i %}))
            {%- case "time.Duration" -%}
                m.{%s f.Name.Pascal %} = toolbelt.MillisecondsToDuration(stmt.Column{%s f.SQLType.Pascal %}({%d i %}))
            {%- default -%}
                m.{%s f.Name.Pascal %} = stmt.Column{%s f.SQLType.Pascal %}({%d i %})
        {%- endswitch -%}
    {%- endfor -%}

    return m, nil
}

func Update{%s t.SingleName.Pascal %}(tx *sqlite.Conn, m *{%s t.SingleName.Pascal %}Model) error {
    stmt := tx.Prep(`
UPDATE {%s t.Name.Lower %}
SET
    {%- for i,f := range t.Fields -%}
        {%- if i > 0 -%}
        {%s f.Name.Lower %} = ?{%d i +1 %},
        {%- endif -%}
    {%- endfor -%}
WHERE id = ?1
    `)
    defer stmt.Reset()

    // Bind parameters
    {%= bindFields(t) %}

    if _, err := stmt.Step(); err != nil {
        return fmt.Errorf("failed to update {%s t.Name.Lower %}: %w", err)
    }

    return nil
}

func Delete{%s t.SingleName.Pascal %}(tx *sqlite.Conn, id int64) error {
    stmt := tx.Prep(`
DELETE FROM {%s t.Name.Lower %}
WHERE id = ?
    `)
    defer stmt.Reset()

    stmt.BindInt64(1, id)

    if _, err := stmt.Step(); err != nil {
        return fmt.Errorf("failed to delete {%s t.Name.Lower %}: %w", err)
    }

    return nil
}

{% endfunc %}

{%- func bindFields(tbl *GenerateCRUDTable) -%}
{%- for _, f := range tbl.Fields -%}
    {%- switch f.GoType.Original -%}
        {%-  case "time.Time" -%}
            stmt.Bind{%s f.SQLType.Pascal %}({%d f.Column %}, toolbelt.TimeToJulianDay(m.{%s f.Name.Pascal %}))
        {%- case "time.Duration" -%}
            stmt.Bind{%s f.SQLType.Pascal %}({%d f.Column %}, toolbelt.DurationToMilliseconds(m.{%s f.Name.Pascal %}))
        {%- default -%}
            stmt.Bind{%s f.SQLType.Pascal %}({%d f.Column %}, m.{%s f.Name.Pascal %})
    {%- endswitch -%}
{%- endfor -%}
{%- endfunc -%}